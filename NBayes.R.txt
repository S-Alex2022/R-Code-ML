install.packages("e1071")
install.packages("tm")
install.packages("wordcloud")
install.packages("gmodels")

library(e1071)
library(tm)
library(wordcloud)
library(gmodels)

#-----------------
data(iris)
pairs(iris[1:4],main="Iris Data (red=setosa,green=versicolor,blue=virginica)", pch=21, bg=c("red","green3","blue")[unclass(iris$Species)])

classifier<-naiveBayes(iris[,1:4], iris[,5]) 
table(predict(classifier, iris[,-5]), iris[,5], dnn=list('predicted','actual'))
#-----------------

#-----------------
setwd("REPLACE WITH PATH TO YOUR FOLDER")
sms_raw <- read.csv("SMSSpamCollection.csv", stringsAsFactors = FALSE, quote="\"", sep=",")
str( sms_raw )

sms_raw$type <- factor(sms_raw$type)
str(sms_raw$type)
table(sms_raw$type)

sms_corpus <- Corpus(VectorSource(sms_raw$text))

print(sms_corpus)
inspect(sms_corpus[1:3])

corpus_clean <- tm_map(sms_corpus, tolower)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)

inspect(sms_corpus[1:3])
inspect(corpus_clean[1:3])

sms_dtm <- DocumentTermMatrix(corpus_clean)

sms_raw_train <- sms_raw[1:4180, ]
sms_raw_test <- sms_raw[4181:5574, ]

sms_dtm_train <- sms_dtm[1:4180, ]
sms_dtm_test <- sms_dtm[4181:5574, ]
sms_corpus_train <- corpus_clean[1:4180]
sms_corpus_test <- corpus_clean[4181:5574]

prop.table(table(sms_raw_train$type))
prop.table(table(sms_raw_test$type))

wordcloud(sms_corpus_train, min.freq = 40, random.order = FALSE)
spam <- subset(sms_raw_train, type == "spam")
ham <- subset(sms_raw_train, type == "ham")
wordcloud(spam$text, max.words = 40, scale = c(3, 0.5))
wordcloud(ham$text, max.words = 40, scale = c(3, 0.5))

sms_dict <- findFreqTerms(sms_dtm_train, 5)
sms_train <- DocumentTermMatrix(sms_corpus_train,list(dictionary = sms_dict))
sms_test <- DocumentTermMatrix(sms_corpus_test, list(dictionary = sms_dict))

convert_counts <- function(x) { 
  x <- ifelse(x > 0, 1, 0)
  x <- factor(x, levels = c(0, 1), labels = c("No", "Yes"))
  return(x) }

sms_train <- apply(sms_train, MARGIN = 2, convert_counts)
sms_test <- apply(sms_test, MARGIN = 2, convert_counts)
sms_classifier <- naiveBayes(sms_train, sms_raw_train$type)
sms_test_pred <- predict(sms_classifier, sms_test)

CrossTable(sms_test_pred, sms_raw_test$type,
             prop.chisq = FALSE, prop.t = FALSE,
             dnn = c('predicted', 'actual'))

#-----------------
